name: CI/CD for time-app project

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  REGISTRY: gchr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20.19.3']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4

      - name: Install API Dependencies
        working-directory: ./api
        run: npm install

      - name: Run unit tests
        working-directory: ./api
        run: npm test

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm install

  build-and-push:
    if: github.event_name == 'push'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub Registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: API image build and push
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/time-app-api ./api
          docker push ${{ secrets.DOCKER_USERNAME }}/time-app-api

      - name: Front image build and push
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/time-app-front ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/time-app-front

  deploy:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: VPS Deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          port: 22
          script: |
            # Layihə qovluğu yoxdursa, klonla
            if [ ! -d "/opt/time-app/.git" ]; then
            sudo git clone https://github.com/${{ github.repository }} /opt/time-app
            fi

            cd /opt/time-app
            sudo git pull origin main

            # Docker Compose yoxdursa, quraşdır
            if ! command -v docker-compose &> /dev/null; then
            echo "Docker Compose tapılmadı, quraşdırılır..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Layihəni yenilə
            docker-compose pull
            docker-compose down
            docker-compose up -d

            # Təmizlik
            docker image prune -f

            # Health-check
            sleep 20
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Frontend is healthy"
            else
              echo "❌ Frontend health check failed"
              exit 1
            fi

            if curl -f http://localhost:5000 > /dev/null 2>&1; then
              echo "✅ API is healthy"
            else
              echo "❌ API health check failed"
              exit 1
            fi
